import{t as e,d as n,i as t,m as l,c as i,S as o,F as r,a,g as s,b as c,o as d,s as f,r as p}from"./vendor.e6aed9f9.js";const u=e('<li class="empty"></li>',2),h=e('<li class="leaf"></li>',2),m=e('<li class="branch"><span class="branch-label"></span></li>',4),g=e("<ul></ul>",2);const v=function e(n){return(()=>{const s=g.cloneNode(!0);return t(s,(()=>{const a=l((()=>!!n.filter),!0),s=l((()=>{var e;return!!(null==(e=n.component)?void 0:e.empty)}),!0);return i(r,{get each(){return a()?n.data.filter(n.filter):n.data},get fallback(){return s()?n.component.empty(n):function(e){return(()=>{const n=u.cloneNode(!0);return t(n,(()=>e.get.emptyLabel(e.prefix))),n})()}(n)},children:(r,a)=>{const s=()=>({...n,node:r,nodeIdx:a,recurse:e});return(()=>{const e=l((()=>{var e;return!!(null==(e=n.component)?void 0:e.branch)}),!0);return i(o,{get when(){return n.get.isLeaf(r)},get fallback(){return e()?n.component.branch(s()):function(e){const n=()=>e.classNameExpanded||"expanded";return(()=>{const l=m.cloneNode(!0),i=l.firstChild;return i.$$click=t=>{let l=t.target;for(;l&&"li"!=l.localName;)l=l.parentNode;if(!l)throw{error:"li not found",event:t};l.classList.toggle(n()),l.classList.contains(n())&&e.load(e.node,e.prefix,e.get)},t(i,(()=>e.get.branchLabel(e.node,e.prefix))),t(l,(()=>e.recurse({...e,data:e.get.childNodes(e.node),prefix:e.get.path(e.node,e.prefix)})),null),l})()}(s())},get children(){const e=l((()=>{var e;return!!(null==(e=n.component)?void 0:e.leaf)}),!0);return()=>e()?n.component.leaf(s()):function(e){return(()=>{const n=h.cloneNode(!0);return t(n,(()=>e.get.leafLabel(e.node,e.prefix))),n})()}(s())}})})()}})})()),a((()=>s.className="tree-view "+(n.prefix?"":"root ")+n.className)),s})()};n(["click"]);var $="solidjs-treeview-component",w="https://github.com/milahu/solidjs-treeview-component";const b=e('<span class="prefix">/</span>',2),x=e('<span class="name"></span>',2),y=e('<span class="link-source"></span>',2),N=e('<span class="link-target"></span>',2),L=e('<span class="file"></span>',2),k=e('<div><h2>demo for </h2><div style="margin-bottom: 1em">source code: <a></a></div><div>click on a directory to load more files</div><div>click on a file to select it. selected file: </div><h4>file tree, show only file names</h4><div style="height: 8em"></div><h4>directory listing, show full file path, similar to the linux command <code>find -printf \'%P\\n\'</code></h4><div style="height: 8em"></div></div>',22),S=e("<code></code>",2);var C;s(`\n  .${C="linux-find"}.tree-view.root { margin-left: 1px; margin-right: 1px; }\n  .${C}.tree-view.root { height: 100%; /* fit to container */; overflow: auto; /* scroll on demand */ }\n  .${C}.tree-view { text-align: left; }\n  .${C}.tree-view ul,\n  .${C}.tree-view { list-style: none; padding: 0; }\n  .${C}.tree-view li { white-space: pre; /* dont wrap on x overflow. TODO fix width on overflow */ }\n  .${C}.tree-view li.branch > span { color: blue; font-family: monospace; }\n  .${C}.tree-view li.branch > ul { display: none; /* default collapsed */ }\n  .${C}.tree-view li.branch.expanded { outline: solid 1px grey; }\n  .${C}.tree-view li.branch.expanded > ul { display: block; }\n  .${C}.tree-view li.empty { font-style: italic; }\n  .${C}.tree-view span.link-source { color: green; font-family: monospace; }\n  .${C}.tree-view span.file { font-family: monospace; }\n  /* .${C}.tree-view span.prefix { opacity: 0.6; } */ /* this looks worse than expected */\n`),s(`\n  .${C="file-tree"}.tree-view.root { margin-left: 1px; margin-right: 1px; }\n  .${C}.tree-view.root { height: 100%; /* fit to container */; overflow: auto; /* scroll on demand */ }\n  .${C}.tree-view { text-align: left; }\n  .${C}.tree-view ul,\n  .${C}.tree-view { list-style: none; padding: 0; }\n  .${C}.tree-view ul { padding-left: 0.5em; margin-left: 0.5em; border-left: solid 1px grey; }\n  .${C}.tree-view li { white-space: pre; /* dont wrap on x overflow. TODO fix width on overflow */ }\n  .${C}.tree-view li.branch > span { color: blue; font-family: monospace; }\n  .${C}.tree-view li.branch > ul { display: none; /* default collapsed */ }\n  .${C}.tree-view li.branch.expanded {  }\n  .${C}.tree-view li.branch.expanded > ul { display: block; }\n  .${C}.tree-view li.empty { font-style: italic; }\n  .${C}.tree-view span.link-source { color: green; font-family: monospace; }\n  .${C}.tree-view span.file { font-family: monospace; }\n`),n(["click"]),p((function(){const[e,n]=c({fileList:[],fileSelected:""});async function o(t=null,l="",i=null){const o=t&&i?i.path(t,l):"",r=["fileList"];let a=e.fileList;if(console.log(`loadFiles build keyPath. prefix ${l}. path /${o}`),o.split("/").filter(Boolean).forEach(((e,n)=>{const t=a.findIndex((([n,t,l,i])=>"d"==t&&l==e));console.log(`loadFiles build keyPath. depth ${n}`,{parentDir:a,i:t,d:e}),r.push(t),a=a[t],r.push(3),a=a[3]})),a.length>0)return void console.log(`already loaded path /${o}`);var s;await(s=500,new Promise((e=>setTimeout(e,s))));const c=o.split("/").filter(Boolean).length;console.log(`loadFiles path = /${o} + depth = ${c} + prefix = ${l}`);const d={files:Array.from({length:5}).map(((e,n)=>{const t="dddfl",l=t[Math.round(Math.random()*(t.length-1))];return"d"==l?[c,l,`dirr-${c}-${n}`,[]]:"f"==l?[c,l,`file-${c}-${n}`]:"l"==l?[c,l,`link-${c}-${n}`,`link-target-${c}-${n}`]:void 0}))};e.fileList&&0!=e.fileList.length?n(...r,d.files):n("fileList",d.files)}function r(){const e={isLeaf:e=>"d"!=e[1],name:e=>e[2],path:(n,t)=>t?`${t}/${e.name(n)}`:e.name(n),childNodes:e=>e[3]},l=(n,l)=>l?[(()=>{const e=b.cloneNode(!0),n=e.firstChild;return t(e,(()=>l),n),e})(),(()=>{const l=x.cloneNode(!0);return t(l,(()=>e.name(n))),l})()]:e.name(n);e.branchLabel=l,e.emptyLabel=e=>"( empty )";return e.leafLabel=(i,o)=>(e=>"l"==e[1])(i)?[(()=>{const e=y.cloneNode(!0);return t(e,(()=>l(i,o))),e})()," -> ",(()=>{const e=N.cloneNode(!0);return t(e,(()=>(e=>e[3])(i))),e})()]:(()=>{const r=L.cloneNode(!0);return r.$$click=()=>n("fileSelected",e.path(i,o)),t(r,(()=>l(i,o))),r})(),e}return d((()=>{o()})),(()=>{const s=k.cloneNode(!0),c=s.firstChild;c.firstChild;const d=c.nextSibling,p=d.firstChild.nextSibling,u=d.nextSibling.nextSibling;u.firstChild;const h=u.nextSibling.nextSibling,m=h.nextSibling.nextSibling;return t(c,(()=>$),null),t(p,(()=>w)),t(u,(()=>{const n=l((()=>!!e.fileSelected),!0);return()=>n()?(()=>{const n=S.cloneNode(!0);return t(n,(()=>e.fileSelected)),n})():"( none )"})(),null),t(h,i(v,{get data(){return e.fileList},get get(){return function(){const e=r(),l=(n,l)=>(()=>{const l=x.cloneNode(!0);return t(l,(()=>e.name(n))),l})();return e.branchLabel=l,e.branchLabel=l,e.leafLabel=(i,o)=>(e=>"l"==e[1])(i)?[(()=>{const e=y.cloneNode(!0);return t(e,(()=>l(i))),e})()," -> ",(()=>{const e=N.cloneNode(!0);return t(e,(()=>(e=>e[3])(i))),e})()]:(()=>{const r=L.cloneNode(!0);return r.$$click=()=>n("fileSelected",e.path(i,o)),t(r,(()=>l(i))),r})(),e}()},get filter(){return e=>"."!=e[2][0]},load:o,className:"file-tree"})),t(m,i(v,{get data(){return e.fileList},get get(){return r()},get filter(){return e=>"."!=e[2][0]},load:o,className:"linux-find"})),a((()=>f(p,"href",w))),s})()}),document.getElementById("root"));
