import{t as e,d as n,i as t,m as l,c as o,S as r,F as i,a,g as s,b as c,o as d,r as f}from"./vendor.732dfc10.js";const u=e('<li class="empty"></li>',2),p=e('<li class="leaf"></li>',2),h=e('<li class="branch"><span class="branch-label"></span></li>',4),g=e("<ul></ul>",2);const m=function e(n){return(()=>{const s=g.cloneNode(!0);return t(s,(()=>{const a=l((()=>!!n.filter),!0),s=l((()=>{var e;return!!(null==(e=n.component)?void 0:e.empty)}),!0);return o(i,{get each(){return a()?n.data.filter(n.filter):n.data},get fallback(){return s()?n.component.empty(n):function(e){return(()=>{const n=u.cloneNode(!0);return t(n,(()=>e.get.emptyLabel(e.prefix))),n})()}(n)},children:(i,a)=>{const s=()=>({...n,node:i,nodeIdx:a,recurse:e});return(()=>{const e=l((()=>{var e;return!!(null==(e=n.component)?void 0:e.branch)}),!0);return o(r,{get when(){return n.get.isLeaf(i)},get fallback(){return e()?n.component.branch(s()):function(e){const n=()=>e.classNameExpanded||"expanded";return(()=>{const l=h.cloneNode(!0),o=l.firstChild;return o.$$click=t=>{let l=t.target;for(;l&&"li"!=l.localName;)l=l.parentNode;if(!l)throw{error:"li not found",event:t};l.classList.toggle(n()),l.classList.contains(n())&&e.load(e.node,e.prefix,e.get)},t(o,(()=>e.get.branchLabel(e.node,e.prefix))),t(l,(()=>e.recurse({data:e.get.childNodes(e.node),get:e.get,prefix:e.get.path(e.node,e.prefix),load:e.load})),null),l})()}(s())},get children(){const e=l((()=>{var e;return!!(null==(e=n.component)?void 0:e.leaf)}),!0);return()=>e()?n.component.leaf(s()):function(e){return(()=>{const n=p.cloneNode(!0);return t(n,(()=>e.get.leafLabel(e.node,e.prefix))),n})()}(s())}})})()}})})()),a((()=>s.className=n.prefix?"tree-view":"tree-view root")),s})()};n(["click"]);const v=e('<span class="prefix">/</span>',2),w=e('<span class="name"></span>',2),b=e('<span class="link-source"></span>',2),x=e('<span class="link-target"></span>',2),y=e('<span class="file"></span>',2),$=e('<div><div>click on a directory to load more files</div><div>selected file: </div><div style="height: 12em"></div></div>',8),k=e("<code></code>",2);s("\n  ul.tree-view.root { margin-left: 1px; margin-right: 1px; }\n  ul.tree-view.root { height: 100%; /* fit to container */; overflow: auto; /* scroll on demand */ }\n  ul.tree-view { text-align: left; }\n  ul.tree-view, ul.tree-view ul { list-style: none; padding: 0; }\n  ul.tree-view li { white-space: pre; /* dont wrap on x overflow. TODO fix width on overflow */ }\n  ul.tree-view li.branch > span { color: blue; font-family: monospace; }\n  ul.tree-view li.branch > ul { display: none; /* default collapsed */ }\n  ul.tree-view li.branch.expanded { outline: solid 1px grey; }\n  ul.tree-view li.branch.expanded > ul { display: block; }\n  ul.tree-view li.empty { font-style: italic; }\n  ul.tree-view span.link-source { color: green; font-family: monospace; }\n  ul.tree-view span.file { font-family: monospace; }\n  /* ul.tree-view span.prefix { opacity: 0.6; } */ /* this looks worse than expected */\n"),n(["click"]),f((function(){const[e,n]=c({fileList:[],fileSelected:""});async function r(t=null,l="",o=null){const r=t&&o?o.path(t,l):"",i=["fileList"];let a=e.fileList;if(console.log(`loadFiles build keyPath. prefix ${l}. path /${r}`),r.split("/").filter(Boolean).forEach(((e,n)=>{const t=a.findIndex((([n,t,l,o])=>"d"==t&&l==e));console.log(`loadFiles build keyPath. depth ${n}`,{parentDir:a,i:t,d:e}),i.push(t),a=a[t],i.push(3),a=a[3]})),a.length>0)return void console.log(`already loaded path /${r}`);var s;await(s=500,new Promise((e=>setTimeout(e,s))));const c=r.split("/").filter(Boolean).length;console.log(`loadFiles path = /${r} + depth = ${c} + prefix = ${l}`);const d={files:Array.from({length:5}).map(((e,n)=>{const t="ddfl"[Math.round(3*Math.random())];return"d"==t?[c,t,`dirr-${c}-${n}`,[]]:"f"==t?[c,t,`file-${c}-${n}`]:"l"==t?[c,t,`link-${c}-${n}`,`link-target-${c}-${n}`]:void 0}))};e.fileList&&0!=e.fileList.length?n(...i,d.files):n("fileList",d.files)}return d((()=>{r()})),(()=>{const i=$.cloneNode(!0),a=i.firstChild.nextSibling;a.firstChild;const s=a.nextSibling;return t(a,(()=>{const n=l((()=>!!e.fileSelected),!0);return()=>n()?(()=>{const n=k.cloneNode(!0);return t(n,(()=>e.fileSelected)),n})():"( none. click a file to select )"})(),null),t(s,o(m,{get data(){return e.fileList},get get(){return function(){const e={isLeaf:e=>"d"!=e[1],name:e=>e[2],path:(n,t)=>t?`${t}/${e.name(n)}`:e.name(n),childNodes:e=>e[3]},l=(n,l)=>l?[(()=>{const e=v.cloneNode(!0),n=e.firstChild;return t(e,(()=>l),n),e})(),(()=>{const l=w.cloneNode(!0);return t(l,(()=>e.name(n))),l})()]:e.name(n);return e.branchLabel=l,e.emptyLabel=e=>"( empty )",e.leafLabel=(o,r)=>(e=>"l"==e[1])(o)?[(()=>{const e=b.cloneNode(!0);return t(e,(()=>l(o,r))),e})()," -> ",(()=>{const e=x.cloneNode(!0);return t(e,(()=>(e=>e[3])(o))),e})()]:(()=>{const i=y.cloneNode(!0);return i.$$click=()=>n("fileSelected",e.path(o,r)),t(i,(()=>l(o,r))),i})(),e}()},get filter(){return e=>"."!=e[2][0]},load:r})),i})()}),document.getElementById("root"));
